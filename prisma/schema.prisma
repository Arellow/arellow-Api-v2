// npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Company {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  website     String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum KycStatus {
  PENDING
  VERIFIED
  FAILED
}

enum KycDocumentType {
  NIN
  PASSPORT
  NATIONALID
}

enum UserPhotoType {
  PROFILE
  KYC
}

model UserMedia {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  type      MediaType
  photoType UserPhotoType? // Optional if not PHOTO

  url      String
  publicId String
  caption  String?
  altText  String?
  order    Int?

  width    Int?
  height   Int?
  duration Float?
  sizeInKB Float?
  format   String?

  createdAt DateTime @default(now())
}

model Kyc {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String          @db.ObjectId
  documentType   KycDocumentType
  documentNumber String
  documentPhoto  String
  status         KycStatus       @default(PENDING)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique(userId)
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  email             String             @unique
  fullname          String
  username          String
  password          String
  phone_number      String
  role              UserRole
  avatar            String             @default("https://img.freepik.com/premium-vector/male-face-avatar-icon-set-flat-design-social-media-profiles_1281173-3806.jpg?semt=ais_hybrid&w=740")
  is_verified       Boolean            @default(false)
  suspended         Boolean            @default(false)
  points            Int                @default(0)
  rewardHistory     RewardHistory[]
  rewardWithdrawals RewardWithdrawal[]
  companyId         String?            @db.ObjectId
  company           Company?           @relation(fields: [companyId], references: [id])
  likes             UserPropertyLike[]

  properties           Property[]                 @relation("UserProperties")
  approvedProperties   Property[]                 @relation("ApprovedProperties")
  // PropertyRequest    PropertyRequest[]
  mortgage             MortgageCalculationDraft[]
  Campaign             Campaign[]
  preQualifications    PreQualification[]
  featuredContributors BlogFeaturedContributor[]  @relation("UserFeaturedContributors")
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  Blog                 Blog[]

  kyc Kyc?
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  REALTOR
  DEVELOPER
  BUYER
}


model AdminPermission { 
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  action       actionRole[]
  resource     String[]
}

enum actionRole {
  KYC
  PROPERTY
  USER
}


enum PropertyStatus {
  PENDING
  APPROVED
  REJECTED
}

model Property {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  category     PropertyCategory
  features     String[]
  amenities    Amenity[]
  country      String
  state        String
  city         String
  neighborhood String
  location     GeoPoint

  bedrooms     Int
  bathrooms    Int
  floors       Int
  squareMeters Int
  price        Float

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], name: "UserProperties")

  status          PropertyStatus @default(PENDING)
  rejectionReason String?
  approvedById    String?        @db.ObjectId
  approvedBy      User?          @relation("ApprovedProperties", fields: [approvedById], references: [id])

  likedBy    UserPropertyLike[]
  likesCount Int                @default(0)

  rewardHistories RewardHistory[]

  media       Media[]
  salesStatus SalesStatus @default(SELLING)

  archived          Boolean @default(false)
  isFeatureProperty Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SalesStatus {
  SELLING
  SOLD
}

enum PropertyCategory {
  RESIDENTIAL
}

model Amenity {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  photoUrl   String
  propertyId String   @db.ObjectId
  property   Property @relation(fields: [propertyId], references: [id])
}

model UserPropertyLike {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String @db.ObjectId
  propertyId String @db.ObjectId

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
}

type GeoPoint {
  lat Float
  lng Float
}

enum MediaType {
  PHOTO
  VIDEO
  TOUR_3D
}

enum PhotoType {
  FRONT_VIEW
  LIVING_ROOM
  KITCHEN
  FLOOR_PLAN
  PRIMARY_ROOM
  OTHER
}

model Media {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String   @db.ObjectId

  type      MediaType
  photoType PhotoType?

  url      String
  publicId String
  caption  String?
  altText  String?
  order    Int?

  width    Int?
  height   Int?
  duration Float?
  sizeInKB Float?
  format   String?

  createdAt DateTime @default(now())
}

model RewardHistory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  points      Int      @default(0)
  reason      String
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  propertyId  String   @db.ObjectId
  property    Property @relation(fields: [propertyId], references: [id])
}

model RewardWithdrawal {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @db.ObjectId
  points            Int
  bankAccountName   String
  bankAccountNumber String
  bankName          String
  status            String   @default("pending")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

model ResetPassword {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  resetString String
  createdAt   Int
  expiresAt   Int
}

model Subscribe {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String?
  phone String?
}

model PropertyRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  username    String
  userRole    String
  email       String
  phoneNumber String
  propertyCategory PropertyCategory
  propertyType     String
  furnishingStatus String
  propertyAddress PropertyAddress
  numberOfBedrooms  Int    @default(0)
  numberOfBathrooms Int    @default(0)
  budget            Int    @default(0)
  description          String?

  status    PropertyRequestStatus @default(PENDING)
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

enum PropertyRequestStatus {
  PENDING
  ASSIGN
}

type PropertyAddress {
  country  String
  city     String
  state    String
  location String
}

model PreQualification {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  role                String?
  email               String
  phone               String
  home_address        String?
  state               String
  city                String
  property_category   String
  neighbourhood       String?
  monthly_budget      Float
  down_payment_goal   Float
  business_or_civil   String?
  employer_name       String?
  level_of_employment String?
  bank_name           String?
  userId              String   @db.ObjectId
  user                User     @relation(fields: [userId], references: [id])
  createdAt           DateTime @default(now())
}

model MortgageCalculationDraft {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  home_location String
  home_price    Float
  down_payment  Float
  userId        String?  @db.ObjectId
  user          User?    @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Campaign {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignType        String
  localMediaName      String
  promotionAd         String
  targetAudience      String
  features            String
  campaignDescription String
  imageUrl            String?
  mediaPlatforms      String[]
  impressions         Int      @default(0)
  clicks              Int      @default(0)
  conversions         Int      @default(0)
  cpc                 Float    @default(0)
  spend               Float    @default(0)
  startDate           DateTime
  endDate             DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              String   @db.ObjectId
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model State {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  image String
}

model Blog {
  id                   String                    @id @default(auto()) @map("_id") @db.ObjectId
  userId               String                    @db.ObjectId
  user                 User                      @relation(fields: [userId], references: [id])
  title                String
  content              String
  author               String
  imageUrl             String?                   @db.String
  socialMediaLinks     String[]                  @default([]) @db.String
  tags                 String[]                  @default(["tech"])
  featuredContributors BlogFeaturedContributor[] @relation("BlogFeaturedContributors")
  category             BlogCategory              @default(INTERNAL)
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  isPublished          Boolean                   @default(false)
  timeToRead           Int                       @default(5)

  @@index([userId])
  @@map("blogs")
}

enum BlogCategory {
  INTERNAL
  EXTERNAL
}

model BlogFeaturedContributor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], name: "UserFeaturedContributors")
  blogId    String   @db.ObjectId
  blog      Blog     @relation(fields: [blogId], references: [id], name: "BlogFeaturedContributors")
  featured  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, blogId])
  @@index([userId])
}
