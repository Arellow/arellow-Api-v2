// npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Company {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  website     String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model User {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  email              String      @unique
  fullname           String
  username           String
  password           String
  phone_number       String?
  role               UserRole  
  avatar             String?
  is_verified        Boolean    @default(false)

  companyId    String?   @db.ObjectId
  company      Company?  @relation(fields: [companyId], references: [id])
  likes        UserPropertyLike[]

  properties         Property[]  @relation("UserProperties")
  approvedProperties Property[]  @relation("ApprovedProperties")

  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  REALTOR
  DEVELOPER
  BUYER
}


enum PropertyStatus {
  PENDING
  APPROVED
  REJECTED
}

model Property {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  category      String
  features      String[]
  amenities  Amenity[]
  country       String
  state         String
  city          String
  neighborhood  String
  location      GeoPoint

  bedrooms      Int
  bathrooms     Int
  floors        Int
  squareMeters  Int
  price         Float

  userId        String     @db.ObjectId
  user          User       @relation(fields: [userId], references: [id], name: "UserProperties")

  status        PropertyStatus @default(PENDING)
  rejectionReason String?   
  approvedById  String?         @db.ObjectId
  approvedBy    User?           @relation("ApprovedProperties", fields: [approvedById], references: [id])
  
  likedBy      UserPropertyLike[]
  likesCount   Int           @default(0)


  media         Media[]
  salesStatus   SalesStatus  @default(SELLING)

  archived      Boolean         @default(false)

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}


enum SalesStatus {
  SELLING
  SOLD
}

model Amenity {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  photoUrl   String

  propertyId String   @db.ObjectId
  property   Property @relation(fields: [propertyId], references: [id])
}

model UserPropertyLike {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  propertyId  String   @db.ObjectId

  user        User     @relation(fields: [userId], references: [id])
  property    Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
}

type GeoPoint {
  lat Float
  lng Float
}


enum MediaType {
  PHOTO
  VIDEO
  TOUR_3D
}

enum PhotoType {
  FRONT_VIEW
  LIVING_ROOM
  KITCHEN
  FLOOR_PLAN
  PRIMARY_ROOM
  OTHER
}



model Media {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  property   Property   @relation(fields: [propertyId], references: [id])
  propertyId String     @db.ObjectId

  type       MediaType
  photoType  PhotoType? // Optional if not PHOTO

  url        String
  publicId   String
  caption    String?
  altText    String?
  order      Int?

  width      Int?
  height     Int?
  duration   Float?
  sizeInKB   Float?
  format     String?

  createdAt  DateTime  @default(now())
}




